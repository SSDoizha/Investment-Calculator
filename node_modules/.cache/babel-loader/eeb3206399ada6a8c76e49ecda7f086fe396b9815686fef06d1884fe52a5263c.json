{"ast":null,"code":"var _jsxFileName = \"/Users/sergejdojza/Desktop/01-starting-project/src/App.js\";\nimport TotalInfo from \"./Components/TotalTable/TotalInfo\";\nimport FormItem from \"./Components/Userform/FormItem\";\nimport Header from \"./Components/Header/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const Buttons = props => {\n    const calculateHandler = userInput => {\n      // Should be triggered when form is submitted\n      // You might not directly want to bind it to the submit event on the form though...\n\n      const yearlyData = []; // per-year results\n\n      let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n      const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n      const expectedReturn = +userInput[\"expected-return\"] / 100;\n      const duration = +userInput[\"duration\"];\n\n      // The below code calculates yearly results (total savings, interest etc)\n      for (let i = 0; i < duration; i++) {\n        const yearlyInterest = currentSavings * expectedReturn;\n        currentSavings += yearlyInterest + yearlyContribution;\n        yearlyData.push({\n          // feel free to change the shape of the data pushed to the array!\n          year: i + 1,\n          yearlyInterest: yearlyInterest,\n          savingsEndOfYear: currentSavings,\n          yearlyContribution: yearlyContribution\n        });\n      }\n\n      // do something with yearlyData ...\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormItem, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), \";\", /*#__PURE__*/_jsxDEV(TotalInfo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), \";\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this);\n    };\n  };\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["TotalInfo","FormItem","Header","jsxDEV","_jsxDEV","App","Buttons","props","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sergejdojza/Desktop/01-starting-project/src/App.js"],"sourcesContent":["import TotalInfo from \"./Components/TotalTable/TotalInfo\";\nimport FormItem from \"./Components/Userform/FormItem\";\nimport Header from \"./Components/Header/Header\";\nfunction App() {\n  const Buttons = (props) => {\n    const calculateHandler = (userInput) => {\n      // Should be triggered when form is submitted\n      // You might not directly want to bind it to the submit event on the form though...\n\n      const yearlyData = []; // per-year results\n\n      let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n      const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n      const expectedReturn = +userInput[\"expected-return\"] / 100;\n      const duration = +userInput[\"duration\"];\n\n      // The below code calculates yearly results (total savings, interest etc)\n      for (let i = 0; i < duration; i++) {\n        const yearlyInterest = currentSavings * expectedReturn;\n        currentSavings += yearlyInterest + yearlyContribution;\n        yearlyData.push({\n          // feel free to change the shape of the data pushed to the array!\n          year: i + 1,\n          yearlyInterest: yearlyInterest,\n          savingsEndOfYear: currentSavings,\n          yearlyContribution: yearlyContribution,\n        });\n      }\n\n      // do something with yearlyData ...\n      return (\n        <div>\n          <Header />\n          <FormItem />;\n          <TotalInfo />;\n        </div>\n      );\n    };\n  };\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,SAAS,MAAM,mCAAmC;AACzD,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,OAAOC,MAAM,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChD,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,OAAO,GAAIC,KAAK,IAAK;IACzB,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;MACtC;MACA;;MAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;MAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;MACpD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;MAC9D,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;MAC1D,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;;MAEvC;MACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;QACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;QACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;QACrDF,UAAU,CAACO,IAAI,CAAC;UACd;UACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;UACXC,cAAc,EAAEA,cAAc;UAC9BG,gBAAgB,EAAER,cAAc;UAChCC,kBAAkB,EAAEA;QACtB,CAAC,CAAC;MACJ;;MAEA;MACA,oBACER,OAAA;QAAAgB,QAAA,gBACEhB,OAAA,CAACF,MAAM;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACVpB,OAAA,CAACH,QAAQ;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,KACZ,eAAApB,OAAA,CAACJ,SAAS;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,KACf;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAEV,CAAC;EACH,CAAC;AACH;AAACC,EAAA,GApCQpB,GAAG;AAsCZ,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}